package ru.util;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static ru.util.BotConstants.*;

@Component
public class KeyboardFactory {

    public InlineKeyboardMarkup mainMenu() {
        return new InlineKeyboardMarkup(List.of(
                row(CMD_BOOK, "book_appointment"),
                row(CMD_MY_APPOINTMENTS, "my_appointments"),
                row(CMD_HISTORY, "history"),
                row(CMD_CONTACTS, "contacts")
        ));
    }

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    public InlineKeyboardMarkup backButton(String text, String callbackData) {
        return new InlineKeyboardMarkup(List.of(row(text, callbackData)));
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    public InlineKeyboardMarkup singleButton(String text, String callbackData) {
        return new InlineKeyboardMarkup(List.of(row(text, callbackData)));
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
    public InlineKeyboardMarkup withBackButton(String text, String callbackText, String callbackData) {
        return new InlineKeyboardMarkup(List.of(
                new InlineKeyboardRow(InlineKeyboardButton.builder()
                        .text(callbackText)
                        .callbackData(callbackData)
                        .build())
        ));
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π
    public InlineKeyboardMarkup historyPagination(int currentPage, int totalPages, String baseCallback) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        InlineKeyboardRow navRow = new InlineKeyboardRow();

        if (currentPage > 0) {
            navRow.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", baseCallback + "_" + (currentPage - 1)));
        }
        if (currentPage < totalPages - 1) {
            navRow.add(createButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", baseCallback + "_" + (currentPage + 1)));
        }

        if (!navRow.isEmpty()) {
            rows.add(navRow);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        rows.add(backButton("üè† –í –º–µ–Ω—é", "back_to_menu").getKeyboard().get(0));

        return new InlineKeyboardMarkup(rows);
    }

    // –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    public InlineKeyboardMarkup cancelAppointmentButton(Long appointmentId, LocalDateTime dateTime) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        InlineKeyboardRow row = new InlineKeyboardRow();
        row.add(createButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_"));
        row.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_menu"));
        rows.add(row);
        return new InlineKeyboardMarkup(rows);
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    public InlineKeyboardMarkup timeSelectionKeyboard(LocalDate date, List<LocalDateTime> availableSlots) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        InlineKeyboardRow currentRow = new InlineKeyboardRow();

        for (LocalDateTime slot : availableSlots) {
            if (slot.isAfter(LocalDateTime.now())) {
                currentRow.add(createButton(
                        "üü¢ " + slot.toLocalTime().format(TIME_FORMAT),
                        "time_" + slot
                ));

                if (currentRow.size() == 3) {
                    rows.add(currentRow);
                    currentRow = new InlineKeyboardRow();
                }
            }
        }

        if (!currentRow.isEmpty()) {
            rows.add(currentRow);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –¥–∞—Ç–∞–º
        rows.add(backButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_dates").getKeyboard().get(0));

        return new InlineKeyboardMarkup(rows);
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    public InlineKeyboardMarkup dateSelectionKeyboard(List<LocalDate> availableDates) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd.MM (E)");

        for (LocalDate date : availableDates) {
            rows.add(row(date.format(dateFormat), "date_" + date));
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –º–µ–Ω—é
        rows.add(backButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_menu").getKeyboard().get(0));

        return new InlineKeyboardMarkup(rows);
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    public InlineKeyboardButton createButton(String text, String callbackData) {
        return InlineKeyboardButton.builder()
                .text(text)
                .callbackData(callbackData)
                .build();
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
    public InlineKeyboardRow row(String text, String callbackData) {
        return new InlineKeyboardRow(createButton(text, callbackData));
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    public InlineKeyboardRow row(InlineKeyboardButton... buttons) {
        InlineKeyboardRow row = new InlineKeyboardRow();
        row.addAll(Arrays.asList(buttons));
        return row;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
    public InlineKeyboardMarkup createKeyboard(List<InlineKeyboardRow> rows) {
        return new InlineKeyboardMarkup(rows);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫
    public InlineKeyboardMarkup createKeyboard(InlineKeyboardRow... rows) {
        return new InlineKeyboardMarkup(List.of(rows));
    }
}