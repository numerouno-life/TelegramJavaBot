package ru.scheduler;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.model.Appointment;
import ru.service.NotificationService;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.concurrent.*;

@Slf4j
@Service
@AllArgsConstructor
public class AppointmentNotificationScheduler {

    private final NotificationService notificationService;
    private final Map<Long, ScheduledFuture<?>> scheduledTasks = new ConcurrentHashMap<>();
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(4);

    public void scheduleNotifications(Appointment appointment) {
        LocalDateTime appointmentTime = appointment.getDateTime();

        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
        scheduleTask(appointment, appointmentTime.minusDays(1),
                "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ %s!");

        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
        scheduleTask(appointment, appointmentTime.minusHours(2),
                "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ %s!");
    }

    private void scheduleTask(Appointment appointment, LocalDateTime notifyTime, String template) {
        LocalDateTime now = LocalDateTime.now();

        if (notifyTime.isBefore(now)) {
            return; // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
        }

        long delay = Duration.between(now, notifyTime).toMillis();

        ScheduledFuture<?> future = scheduler.schedule(() -> {
            try {
                String message = template.formatted(
                        appointment.getDateTime().format(DateTimeFormatter.ofPattern("dd.MM.yyyy '–≤' HH:mm"))
                );
                if (appointment.getUser().getTelegramId() == null) {
                    log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∏–º–µ–µ—Ç Telegram ID", appointment.getUser().getUsername());
                    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                }
                notificationService.sendMessage(
                        appointment.getUser().getTelegramId(),
                        message
                );
                log.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {} –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ {}",
                        appointment.getUser().getUsername(), appointment.getDateTime());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", e);
            }
        }, delay, TimeUnit.MILLISECONDS);
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É (–∫–ª—é—á = ID –∑–∞–ø–∏—Å–∏)
        scheduledTasks.put(appointment.getId(), future);
    }

    public void cancelNotifications(Long appointmentId) {
        ScheduledFuture<?> future = scheduledTasks.remove(appointmentId);
        if (future != null) {
            future.cancel(true);
            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {} –æ—Ç–º–µ–Ω–µ–Ω—ã", appointmentId);
        }
    }

}
