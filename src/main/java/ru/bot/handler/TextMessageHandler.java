package ru.bot.handler;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.model.Appointment;
import ru.model.User;
import ru.model.enums.AdminAppointmentState;
import ru.model.enums.StatusAppointment;
import ru.model.enums.UserAppointmentState;
import ru.model.enums.UserRole;
import ru.service.*;
import ru.util.AdminKeyboard;
import ru.util.KeyboardFactory;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import static ru.util.BotConstants.*;

@Slf4j
@Component
@RequiredArgsConstructor
public class TextMessageHandler {

    private final AppointmentService appointmentService;
    private final NotificationService notificationService;
    private final KeyboardFactory keyboardFactory;
    private final UserService userService;
    private final UserSessionService userSessionService;
    private final WorkScheduleService workScheduleService;
    private final AdminKeyboard adminKeyboard;
    private final AdminCallbackHandler adminCallbackHandler;

    public void handleTextMessage(Update update) {
        Message message = update.getMessage();
        Long chatId = message.getChatId();
        String text = message.getText();
        String role = userSessionService.getRole(chatId);
        User from = userService.getOrCreateUser(
                chatId,
                message.getFrom().getUserName(),
                message.getFrom().getFirstName(),
                message.getFrom().getLastName()
        );

        if (CMD_ADMIN.equalsIgnoreCase(text)) {
            if (userService.isAdmin(chatId)) {
                userSessionService.setRole(chatId, "ADMIN");
                notificationService.sendAdminMenu(chatId, "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*");
            } else {
                notificationService.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.");
            }
            return;
        }

        UserAppointmentState userState = appointmentService.getUserState(chatId);
        AdminAppointmentState adminState = appointmentService.getAdminState(chatId);
        log.debug("üëë Admin mode: chatId={}, adminState={}", chatId, adminState);
        log.debug("üë§ User state: {}", userState);

        if (CMD_START.equalsIgnoreCase(text) || CMD_BEGIN.equalsIgnoreCase(text)) {
            sendWelcome(chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (UserAppointmentState.STATE_AWAITING_NAME.equals(userState)) {
            handleUserName(chatId, text, message.getMessageId());
            return;
        }
        if (UserAppointmentState.STATE_AWAITING_PHONE.equals(userState)) {
            handleUserPhone(chatId, text, message.getMessageId(), false, message.getFrom().getUserName());
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∞
        if ("ADMIN".equals(role)) {
            log.debug("üëë Admin mode: chatId={}, adminState={}", chatId, adminState);
            switch (adminState) {
                case ADM_AWAITING_NAME -> handleUserName(chatId, text, message.getMessageId());
                case ADM_AWAITING_PHONE -> handleUserPhone(chatId, text, message.getMessageId(),
                        true, message.getFrom().getUserName());
                case AWAITING_OVERRIDE_DATE -> handleAdminOverrideDate(chatId, text);
                case AWAITING_OVERRIDE_TIME -> handleAdminOverrideTime(chatId, text);
                case AWAITING_OVERRIDE_REASON -> handleAdminOverrideReason(chatId, text);
                default -> notificationService.sendAdminMenu(chatId, "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*");
            }
            return;
        }

        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        notificationService.sendMainMenu(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    }

    private void handleAdminOverrideReason(Long chatId, String text) {
        LocalDate date = userSessionService.getPendingDate(chatId).toLocalDate();
        String reason = "-".equals(text.trim()) ? "" : text.trim();

        if ("false".equals(userSessionService.getPendingName(chatId))) {
            // –≤—ã—Ö–æ–¥–Ω–æ–π
            workScheduleService.setWorkDayOverride(date, null, null, false, reason);
        } else {
            // —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            LocalTime start = userSessionService.getPendingStartTime(chatId);
            LocalTime end = userSessionService.getPendingEndTime(chatId);
            workScheduleService.setWorkDayOverride(date, start, end, true, reason);
        }
        notificationService.sendMessage(chatId, "‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
        userSessionService.clearAdminState(chatId);
        notificationService.sendOrEditMessage(chatId, null,
                "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*", adminKeyboard.getMainAdminMenu());
    }

    private void handleAdminOverrideTime(Long chatId, String text) {
        if ("–≤—ã—Ö–æ–¥–Ω–æ–π".equalsIgnoreCase(text.trim())) {
            userSessionService.setAdminState(chatId, AdminAppointmentState.AWAITING_OVERRIDE_REASON);
            userSessionService.setPendingName(chatId, "false");
            notificationService.sendMessage(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É (–∏–ª–∏ '-'):");
        } else {
            try {
                String[] parts = text.split("-");
                LocalTime start = LocalTime.parse(parts[0].trim());
                LocalTime end = LocalTime.parse(parts[1].trim());
                userSessionService.setPendingStartTime(chatId, start);
                userSessionService.setPendingEndTime(chatId, end);
                userSessionService.setAdminState(chatId, AdminAppointmentState.AWAITING_OVERRIDE_REASON);
                notificationService.sendMessage(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É (–∏–ª–∏ '-'):");
            } catch (Exception e) {
                notificationService.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: 10:00-18:00");
            }
        }
    }

    private void handleAdminOverrideDate(Long chatId, String dateString) {
        try {
            LocalDate date = LocalDate.parse(dateString);
            userSessionService.setPendingDate(chatId, date.atStartOfDay());
            userSessionService.setAdminState(chatId, AdminAppointmentState.AWAITING_OVERRIDE_TIME);
            notificationService.sendMessage(chatId, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00-18:00)\n" +
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–≤—ã—Ö–æ–¥–Ω–æ–π'.");
        } catch (Exception e) {
            notificationService.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –ì–ì–ì–ì-–ú–ú-–î–î");
        }

    }

    private void sendWelcome(Long chatId) {
        String welcome = """
                üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã *SH*!
                
                –í—ã –º–æ–∂–µ—Ç–µ:
                ‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É
                ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π
                ‚Ä¢ –£–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
                """;
        notificationService.sendMainMenu(chatId, welcome);
    }

    private void handleUserName(Long chatId, String name, Integer messageId) {
        deletePendingMessage(chatId, messageId);
        userSessionService.setPendingName(chatId, name);

        String role = userSessionService.getRole(chatId);
        if ("ADMIN".equals(role)) {
            deletePendingMessage(chatId, messageId);
            appointmentService.setAdminState(chatId, AdminAppointmentState.ADM_AWAITING_PHONE);
            Message sent = notificationService.sendMessageAndReturn(chatId,
                    "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:", null);
            appointmentService.setPendingMessageId(chatId, sent.getMessageId());
        } else {
            appointmentService.setUserState(chatId, UserAppointmentState.STATE_AWAITING_PHONE);
            Message sentMessage = notificationService.sendMessageAndReturn(chatId,
                    "–°–ø–∞—Å–∏–±–æ, *%s*! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±".formatted(name),
                    keyboardFactory.backButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_dates")
            );
            appointmentService.setPendingMessageId(chatId, sentMessage.getMessageId());
        }
    }

    private void handleUserPhone(Long chatId, String phone, Integer messageId,
                                 boolean isAdminFlow, String telegramUsername) {
        log.info("üìû handleUserPhone –≤—ã–∑–≤–∞–Ω: chatId={}, isAdminFlow={}, adminState={}",
                chatId, isAdminFlow, appointmentService.getAdminState(chatId));
        deletePendingMessage(chatId, messageId);

        String name = userSessionService.getPendingName(chatId);
        LocalDateTime dateTime = appointmentService.getPendingDate(chatId);

        if (dateTime == null) {
            notificationService.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
            cleanupAfterError(chatId, isAdminFlow);
            return;
        }

        try {
            User user;
            if (isAdminFlow) {
                user = userService.findOrCreateByPhone(phone, name);
            } else {
                user = userService.updateUserDetails(chatId, name, phone); // –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫ —Ç–µ–∫—É—â–µ–º—É chatId
            }

            Appointment appointment = Appointment.builder()
                    .user(user)
                    .dateTime(dateTime)
                    .status(StatusAppointment.ACTIVE)
                    .createdAt(LocalDateTime.now())
                    .build();
            log.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å: ID={}, –ö–ª–∏–µ–Ω—Ç={}, –î–∞—Ç–∞={}, –°—Ç–∞—Ç—É—Å={}",
                    appointment.getId(),
                    appointment.getUser().getFirstName(),
                    appointment.getDateTime(),
                    appointment.getStatus());

            appointmentService.createAppointment(appointment);

            // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –µ–≥–æ chatId)
            notifyClientIfPossible(user, appointment, chatId);


            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            appointmentService.clearUserState(chatId);
            appointmentService.clearAdminState(chatId);
            userSessionService.clearRole(chatId);
            userSessionService.clearPendingName(chatId);
            appointmentService.clearPendingDate(chatId);

            if (isAdminFlow) {
                notificationService.sendAdminMenu(chatId, "‚úÖ –ö–ª–∏–µ–Ω—Ç *%s* —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ %s.".formatted(
                        name,
                        dateTime.format(DateTimeFormatter.ofPattern("dd.MM.yyyy '–≤' HH:mm"))
                ));
            } else {
                notificationService.sendOrEditMessage(chatId, null,
                        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ %s!".formatted(
                                dateTime.format(DateTimeFormatter.ofPattern("dd.MM.yyyy '–≤' HH:mm"))
                        ), null);
                notificationService.sendMainMenu(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
            }

        } catch (IllegalStateException e) {
            notificationService.sendMessage(chatId, "‚ùå –í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ.");

            if (isAdminFlow) {
                appointmentService.setAdminState(chatId, AdminAppointmentState.ADM_AWAITING_DATE);
                sendDateSelection(chatId, null);
            } else {
                appointmentService.setUserState(chatId, UserAppointmentState.STATE_AWAITING_PHONE);
                sendDateSelection(chatId, null);
            }
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ –æ–Ω –∫–æ–≥–¥–∞-—Ç–æ –ø–∏—Å–∞–ª –±–æ—Ç—É
    private void notifyClientIfPossible(User user, Appointment appointment, Long adminChatId) {
        if (user.getTelegramId() != null) {
            try {
                notificationService.sendMessage(user.getTelegramId(), """
                        üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å –Ω–∞ %s.
                        
                        –°—Ç—Ä–∏–∂–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è:
                        üìÖ %s
                        ‚è∞ %s
                        
                        –ï—Å–ª–∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ ‚Äî –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ –º–µ–Ω—é.
                        """.formatted(
                        appointment.getDateTime().format(DATE_FORMAT),
                        appointment.getDateTime().format(DATE_FORMAT),
                        appointment.getDateTime().format(TIME_FORMAT)
                ));
            } catch (Exception e) {
                log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(), e.getMessage());
            }
        }
    }

    private void deletePendingMessage(Long chatId, Integer messageId) {
        Integer pendingMessageId = appointmentService.getPendingMessageId(chatId);
        if (pendingMessageId != null) {
            notificationService.deleteMessage(chatId, pendingMessageId);
            appointmentService.clearPendingMessageId(chatId);
        }
        if (messageId != null) {
            notificationService.deleteMessage(chatId, messageId);
        }
    }

    public void startAppointmentProcess(Long chatId, Integer messageId) {
        if (messageId != null) {
            notificationService.deleteMessage(chatId, messageId);
        }
        appointmentService.setUserState(chatId, UserAppointmentState.STATE_AWAITING_DATE);
        sendDateSelection(chatId, null);
    }

    public void sendDateSelection(Long chatId, Integer messageId) {
        if (messageId != null) {
            notificationService.deleteMessage(chatId, messageId);
        }

        LocalDate today = LocalDate.now();
        List<LocalDate> availableDates = new ArrayList<>();
        for (int i = 0; i < 7; i++) {
            LocalDate date = today.plusDays(i);
            if (appointmentService.isWorkingDay(date)) {
                List<LocalDateTime> slots = appointmentService.getAvailableTimeSlots(date.atStartOfDay());
                if (!slots.isEmpty()) availableDates.add(date);
            }
        }

        InlineKeyboardMarkup markup = keyboardFactory.dateSelectionKeyboard(availableDates, UserRole.USER);
        notificationService.sendOrEditMessage(chatId, messageId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:", markup);
    }

    // –ß–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    private void cleanupAfterError(Long chatId, boolean isAdminFlow) {
        appointmentService.clearUserState(chatId);
        if (isAdminFlow) appointmentService.clearAdminState(chatId);
        userSessionService.clearRole(chatId);
        userSessionService.clearPendingName(chatId);
        appointmentService.clearPendingDate(chatId);
    }
}
