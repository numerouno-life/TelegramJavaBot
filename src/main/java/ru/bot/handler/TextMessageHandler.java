package ru.bot.handler;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import ru.model.Appointment;
import ru.model.enums.StatusAppointment;
import ru.scheduler.AppointmentNotificationScheduler;
import ru.service.AppointmentService;
import ru.service.NotificationService;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class TextMessageHandler {

    private final AppointmentService appointmentService;
    private final NotificationService notificationService;
    private final AppointmentNotificationScheduler notificationScheduler;

    public void handleTextMessage(Update update) {
        Message message = update.getMessage();
        Long chatId = message.getChatId();
        String text = message.getText();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        String state = appointmentService.getUserState(chatId);

        if ("/start".equalsIgnoreCase(text)) {
            sendWelcome(chatId);
            return;
        }

        if ("AWAITING_NAME".equals(state)) {
            handleUserName(chatId, text, message.getMessageId());
            return;
        }

        if ("AWAITING_PHONE".equals(state)) {
            handleUserPhone(chatId, text, message.getMessageId());
            return;
        }

        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        notificationService.sendMainMenu(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    }

    private void sendWelcome(Long chatId) {
        String welcome = """
                üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã *AURA*!
                
                –í—ã –º–æ–∂–µ—Ç–µ:
                ‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É
                ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
                ‚Ä¢ –£–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
                """;
        notificationService.sendMainMenu(chatId, welcome);
    }

    private void handleUserName(Long chatId, String name, Integer messageId) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º
        notificationService.deleteMessage(chatId, messageId);

        appointmentService.setPendingName(chatId, name);
        appointmentService.setUserState(chatId, "AWAITING_PHONE");

        notificationService.sendOrEditMessage(chatId, null,
                "–°–ø–∞—Å–∏–±–æ, *%s*! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±".formatted(name),
                null
        );
    }

    private void handleUserPhone(Long chatId, String phone, Integer messageId) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º
        notificationService.deleteMessage(chatId, messageId);

        LocalDateTime dateTime = appointmentService.getPendingDate(chatId);
        if (dateTime == null) {
            notificationService.sendOrEditMessage(chatId, null,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", null);
            appointmentService.clearUserState(chatId);
            return;
        }

        try {
            Appointment appointment = Appointment.builder()
                    .clientChatId(chatId)
                    .clientName(appointmentService.getPendingName(chatId))
                    .clientPhoneNumber(phone)
                    .dateTime(dateTime)
                    .status(StatusAppointment.PENDING)
                    .build();

            appointmentService.createAppointment(appointment);
            appointmentService.setUserState(chatId, null);


            notificationService.sendOrEditMessage(chatId, null, """
                            ‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ %s!
                            
                            –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
                            ‚Ä¢ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏
                            ‚Ä¢ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞
                            
                            """.formatted(dateTime.format(DateTimeFormatter.ofPattern("dd.MM.yyyy '–≤' HH:mm"))),
                    null
            );
        } catch (IllegalStateException e) {
            notificationService.sendOrEditMessage(chatId, null,
                    "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.",
                    null
            );
            startAppointmentProcess(chatId, null);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        notificationService.sendMainMenu(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    }

    public void startAppointmentProcess(Long chatId, Integer messageId) {
        if (messageId != null) {
            notificationService.deleteMessage(chatId, messageId);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appointmentService.setUserState(chatId, "AWAITING_DATE");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
        sendDateSelection(chatId, null);
    }

    public void sendDateSelection(Long chatId, Integer messageId) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        LocalDate today = LocalDate.now();
        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd.MM (E)");

        for (int i = 0; i < 7; i++) {
            LocalDate date = today.plusDays(i);
            if (!appointmentService.getAvailableTimeSlots(date.atStartOfDay()).isEmpty()) {
                InlineKeyboardButton button = InlineKeyboardButton.builder()
                        .text(date.format(dateFormat))
                        .callbackData("date_" + date)
                        .build();
                rows.add(new InlineKeyboardRow(button));
            }
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –º–µ–Ω—é
        rows.add(new InlineKeyboardRow(
                InlineKeyboardButton.builder()
                        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                        .callbackData("back_to_menu")
                        .build()
        ));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(rows);
        notificationService.sendOrEditMessage(chatId, messageId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:", markup);
    }



}
