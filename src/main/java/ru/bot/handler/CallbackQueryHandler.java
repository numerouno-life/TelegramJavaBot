package ru.bot.handler;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import ru.model.Appointment;
import ru.service.AppointmentService;
import ru.service.NotificationService;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
@AllArgsConstructor
public class CallbackQueryHandler {

    private final AppointmentService appointmentService;
    private final NotificationService notificationService;
    private final TextMessageHandler textMessageHandler;

    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("dd.MM (E)");
    private static final DateTimeFormatter TIME_FORMAT = DateTimeFormatter.ofPattern("HH:mm");

    public void handleCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        if (data.startsWith("date_")) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
            LocalDate selectedDate = LocalDate.parse(data.substring(5));
            sendTimeSelection(chatId, messageId, selectedDate);
        } else if (data.startsWith("time_")) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            LocalDateTime selectedTime = LocalDateTime.parse(data.substring(5));
            appointmentService.setPendingDate(chatId, selectedTime);
            appointmentService.setUserState(chatId, "AWAITING_NAME");

            notificationService.sendOrEditMessage(chatId, messageId,
                    "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: " + selectedTime.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
                            + "\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", null
            );

        } else if (data.equals("back_to_menu")) {
            List<Appointment> appointments = appointmentService.getUserAppointments(chatId);
            String text = appointments.isEmpty() ? "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" : "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
            notificationService.sendMainMenu(chatId, text);

        } else if (data.equals("book_appointment")) {
            textMessageHandler.startAppointmentProcess(chatId, messageId);

        } else if (data.equals("my_appointments")) {
            showUserAppointments(chatId);

        } else if (data.equals("contacts")) {
            notificationService.sendContacts(chatId);

        } else if (data.equals("back_to_dates")) {
            // –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            textMessageHandler.sendDateSelection(chatId, messageId);
        } else {
            log.warn("Unknown callback: {}", data);
        }
    }

    private void sendTimeSelection(Long chatId, Integer messageId, LocalDate date) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        LocalDateTime start = date.atStartOfDay().withHour(10);
        LocalDateTime end = date.atStartOfDay().withHour(21);
        DateTimeFormatter timeFormat = DateTimeFormatter.ofPattern("HH:mm");

        InlineKeyboardRow row = new InlineKeyboardRow();

        while (start.isBefore(end)) {
            if (appointmentService.isTimeSlotAvailable(start)) {
                InlineKeyboardButton button = InlineKeyboardButton.builder()
                        .text("üü¢ " + start.toLocalTime().format(timeFormat))
                        .callbackData("time_" + start)
                        .build();
                row.add(button);

                if (row.size() == 3) {
                    rows.add(row);
                    row = new InlineKeyboardRow();
                }
            }
            start = start.plusHours(1);
        }
        if (!row.isEmpty()) {
            rows.add(row);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –¥–∞—Ç–∞–º
        rows.add(new InlineKeyboardRow(
                InlineKeyboardButton.builder()
                        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                        .callbackData("back_to_dates")
                        .build()
        ));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(rows);
        notificationService.sendOrEditMessage(chatId, messageId,
                "–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ " + date.format(DateTimeFormatter.ofPattern("dd.MM (E)")) + ":\nüü¢ - —Å–≤–æ–±–æ–¥–Ω–æ",
                markup
        );
    }


    private void showUserAppointments(Long chatId) {
        List<Appointment> appointments = appointmentService.getUserAppointments(chatId);
        if (appointments.isEmpty()) {
            notificationService.sendOrEditMessage(chatId, null, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", null);
        } else {
            StringBuilder sb = new StringBuilder("–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n");
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
            for (Appointment app : appointments) {
                sb.append("üìÖ ").append(app.getDateTime().format(formatter))
                        .append("\nüíá –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞")
                        .append("\nüìû ").append(app.getClientPhoneNumber())
                        .append("\n\n");
            }
            notificationService.sendOrEditMessage(chatId, null, sb.toString(), null);
        }
    }
}
